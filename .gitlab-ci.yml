################################################################################
# Gitlab CI samples for Drupal 8  project, code quality and deploy.
#
# Project: https://gitlab.com/mog33/gitlab-ci-drupal
# Documentation: https://gitlab.com/mog33/gitlab-ci-drupal
# Author: Jean Valverde contact@dev-drupal.com
# License: GPL-3
#
# For Gitlab CI help on this file see: https://docs.gitlab.com/ee/ci/yaml
#
################################################################################

################################################################################
# Base image for all ci actions, see https://gitlab.com/mog33/drupal8ci
################################################################################

# [CI_TYPE] Select the base image for all tests and actions.

# For a module or theme, this image include Drupal from the official Docker
# image with tools for CI.
image: mogtofu33/drupal8ci:${DRUPAL_VERSION}-selenium

# For a project including a composer.json file.
# image: mogtofu33/drupal8ci:${DRUPAL_VERSION}-selenium-no-drupal

variables:
  ##############################################################################
  #
  # Make CI very verbose in case of problem.
  # CI_DEBUG_TRACE: "1"
  #
  # Verbose scripts, mostly composer and phpunit. 1|0.
  VERBOSE: "0"
  # No ansi flag for composer.
  NO_ANSI: "1"

  # Minor Drupal version to work with.
  DRUPAL_VERSION: "8.7"

  # [CI_TYPE] Select if you are using CI to test, options are:
  #   project
  #     A full Drupal project with a composer.json file.
  #   module
  #     A single Drupal module.
  #   theme
  #     A single Drupal theme.
  #   custom
  #     A Codebase modules/themes/profile for a Drupal project without a
  #     composer.json file based on Drupal project. The main use case is for
  #     this module.
  CI_TYPE: "module"

  # Path is relative to project root, for included Drupal in the
  # image, DOC_ROOT and WEB_ROOT must be the same. For a project based on Drupal
  # project this is 'web'. Can be 'docroot' on some distributions.
  #
  # If using the image with Drupal for a module or a theme.
  WEB_ROOT: "/var/www/html"
  #
  # [CI_TYPE] If using a Drupal project with a composer.json or custom.
  # WEB_ROOT: "/var/www/html/web"

  # Do not need editing when using ci image.
  DOC_ROOT: "/var/www/html"

  # Nightwatch.js tests to run, only tag, core, all except core.
  # see https://www.drupal.org/docs/8/testing/javascript-testing-using-nightwatch
  # Add --verbose for a full log from Nightwatch if it fail.
  # NIGHTWATCH_TESTS: "--tag custom"
  # NIGHTWATCH_TESTS: "--skiptags core"

  # Phpunit tests to run, only custom code or empty for all
  # (included Drupal) see .gitlab-ci/phpunit.xml for settings.
  PHPUNIT_TESTS: "custom"

  # All reports will be available in artifacts from this folder.
  # Do not need any editing as it's for CI only.
  REPORT_DIR: "reports"

  ##############################################################################
  # [TESTING] Next part can be removed for testing only.
  #
  # See Phpqa available tools:
  #   https://github.com/EdgedesignCZ/phpqa#available-tools
  # Allow some errors, this will stop the pipeline if a limit is reached.
  # TOOLS: "--tools phpcs:0,phpmd,phpcpd,parallel-lint"
  TOOLS: "--tools phpcs:10,phpmd"
  # Coding best practices limit, ~10 could be reasonable, to adapt for your
  # project. Current is strict and do not allow errors.
  BEST_PRACTICES: "phpcs:10"

  # Comma separated for phpqa and phpmetrics.
  # Will fail if a folder is empty.
  PHP_CODE: "${WEB_ROOT}/modules/custom"
  # PHP_CODE: "${WEB_ROOT}/themes/custom"
  # PHP_CODE: "${WEB_ROOT}/modules/custom,${WEB_ROOT}/themes/custom"

  ##############################################################################
  # Eslint / Phpqa settings.
  #
  # Space separated for eslint and sass lint.
  JS_CODE: "${WEB_ROOT}/**/custom/**/*.js"
  CSS_FILES: "${WEB_ROOT}/(themes|modules)/custom/**/css/*.css"
  SCSS_FILES: "${WEB_ROOT}/(themes|modules)/custom/**/scss/*.scss"
  SASS_CONFIG: "${CI_PROJECT_DIR}/.gitlab-ci/.sass-lint.yml"

  # PhpQA specific variables to prepare run.
  # Ignore files and dir for all Phpqa tools.
  PHPQA_IGNORE_DIRS: "--ignoredDirs vendor,bootstrap,tests"
  PHPQA_IGNORE_FILES: "--ignoredFiles Readme.md,style.css,print.css,*Test.php"
  # Options for Phpqa to build a report to download, need artifacts set on the
  # job, see '.report' below.
  PHPQA_REPORT: "--report --buildDir ${REPORT_DIR}"
  PHPQA_PHP_CODE: "--analyzedDirs ${PHP_CODE} ${PHPQA_IGNORE_DIRS} ${PHPQA_IGNORE_FILES}"
  PHPQA_ALL_CODE: "--analyzedDirs ${WEB_ROOT} ${PHPQA_IGNORE_DIRS} ${PHPQA_IGNORE_FILES}"

##############################################################################
  # [DEPLOY] Global settings for all env used for deploy.
  # Just an example, adapt with 'Deploy jobs definition' at the end of this
  # file.
  ##############################################################################
  #
  # Remote machine access and information.
  # USER_NAME: "ubuntu"
  # DRUPAL_FOLDER: "/var/www/html/MY_DRUPAL_ROOT"
  # Deploy environments configuration, add or remove depending deploy jobs.
  # Testing config, set host or ip
  # TESTING_HOST: "localhost"
  # Staging config, set host or ip
  # STAGING_HOST: "localhost"
  # Production config, set host or ip
  # PRODUCTION_HOST: "localhost"

################################################################################
# Define your stages, this will be "pipelines" in gitlab.
#   https://docs.gitlab.com/ee/ci/pipelines.html
################################################################################

stages:
  - build
  - tests
  # [TESTING] Next part can be removed for testing only.
  # On each push.
  - code quality
  - code lint
  # Only on tag, when released.
  - php code metrics
  # [DEPLOY] Manual if branch testing or master or tag.
  # - deploy to testing
  # [DEPLOY] Manual if branch master or tag.
  # - deploy to staging
  # [DEPLOY] Manual if branch master or tag.
  # - deploy to production

################################################################################
# Gitlab ci templates for common jobs to avoid repeat, see
#   https://docs.gitlab.com/ee/ci/yaml/#extends
################################################################################

# When to run tests, on branch testing and tags.
.test_except_only:
  # Build and tests are only for branch testing or tags.
  # For more options see
  #   https://docs.gitlab.com/ee/ci/yaml/#only-and-except-simplified
  except:
    - master
    - @branch
  only:
    - testing
    - tags

# Reports produced and visible in job report.
.default_artifacts: &default_artifacts
  paths:
    - ${REPORT_DIR}/*.html
    - ${REPORT_DIR}/*.svg
  # Name will be based on job and branch.
  name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
  # How long do we keep reports files?
  expire_in: 2 day
  # Force artifacts even if the job fail.
  when: always

# Global tests variables.
.test_variables: &test_variables
  MYSQL_DATABASE: "drupal"
  MYSQL_ALLOW_EMPTY_PASSWORD: "1"
  # When install Drupal is needed, choose a profile.
  # To install Drupal from a config ../config/sync folder choose "config_installer"
  DRUPAL_INSTALL_PROFILE: "minimal"
  DB_DUMP: "${CI_PROJECT_DIR}/dump"
  SIMPLETEST_BASE_URL: "http://localhost"
  SIMPLETEST_DB: "mysql://root@mariadb/drupal"
  BROWSERTEST_OUTPUT_DIRECTORY: "${WEB_ROOT}/sites/simpletest"
  # No spaces.
  MINK_DRIVER_ARGS_WEBDRIVER: '["chrome",{"browserName":"chrome","chromeOptions":{"args":["--whitelisted-ips","--disable-gpu","--headless","--no-sandbox","--window-size=1920,1080"]}},"http://localhost:4444/wd/hub"]'
  APACHE_RUN_USER: "www-data"
  APACHE_RUN_GROUP: "www-data"
  # Selenium extra options, see
  # https://github.com/SeleniumHQ/docker-selenium#se_opts-selenium-configuration-options
  SE_OPTS: ""

# Testing template for phpunit, this provide Apache / Php.
.test_template:
  dependencies:
    - Build
  services:
    - mariadb:latest
  extends: .test_except_only
  variables:
    <<: *test_variables
  before_script:
    # Copy RoboFile.
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    # Symlink Drupal codebase or the module/theme to the web root of the ci
    # image.
    - robo prepare:folders
    # Start Apache.
    - apache2-foreground&
    # Copy files and prepare test folder with permissions.
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/phpunit.xml ${WEB_ROOT}/core || true
    - mkdir -p "${BROWSERTEST_OUTPUT_DIRECTORY}/browser_output"
    - chmod -R g+s "${BROWSERTEST_OUTPUT_DIRECTORY}"
    - chown -R ${APACHE_RUN_USER}:${APACHE_RUN_GROUP} ${BROWSERTEST_OUTPUT_DIRECTORY}
    - chown -R ${APACHE_RUN_USER}:${APACHE_RUN_GROUP} ${WEB_ROOT}/sites
    - mkdir -p "${REPORT_DIR}"
    - chown -R ${APACHE_RUN_USER}:${APACHE_RUN_GROUP} ${REPORT_DIR}
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/*

################################################################################
# Build and tests jobs.
################################################################################

# Build job for all tests.
# For a project, this build part use composer install to get the Drupal code.
# For a theme this can be used with a specific script to build something
# (grunt, webpack, yarn...). You must add your script and adapt the cache and
# artifacts.
Build:
  stage: build
  extends: .test_except_only
  script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    # check Drupal codebase and composer install if needed.
    - robo perform:build
    # Add here any custom build step, composer run-script, grunt, webpack, yarn...
  variables:
    <<: *test_variables
  # [CI_TYPE] When using included Drupal for a module or a theme, the
  # cache and artifacts can be removed as we don't install the Drupal with
  # composer.
  #
  # On build we cache the composer and web folders to speed up the tests.
  # cache:
  #   key: drupal-$CI_BUILD_REF_NAME
  #   paths:
  #     - vendor
  #     - web
  # artifacts:
  #   paths:
  #     # Build files for next steps and deploy/release.
  #     - vendor
  #     - web
  #     - drush
  #     - scripts
  #     - composer.json
  #     - composer.lock
  #     - .env.example
  #     - load.environment.php
  #   expire_in: 1 day

################################################################################
# Drupal tests see
# https://git.drupalcode.org/project/drupal/blob/HEAD/core/tests/README.md
################################################################################

# Unit and kernel:
#   stage: tests
#   extends: .test_template
#   script:
#     - robo test:suite "${PHPUNIT_TESTS}unit,${PHPUNIT_TESTS}kernel"

# Code coverage:
#   stage: tests
#   extends: .test_template
#   script:
#     - robo test:coverage "${PHPUNIT_TESTS}unit,${PHPUNIT_TESTS}kernel"
#   after_script:
#     - cp -r ${WEB_ROOT}/${REPORT_DIR} ./
#     # [CODECOV] integration, see https://codecov.io
#     # Need to set up CI ENVIRONMENT VARIABLES to work, see https://codecov.io
#     # - bash <(curl -s https://codecov.io/bash) -f ${REPORT_DIR}/coverage.xml || true
#   # https://docs.gitlab.com/ee/ci/yaml/#coverage
#   coverage: '/^\s*Lines:\s*\d+.\d+\%/'

Functional:
  stage: tests
  extends: .test_template
  script:
    # For functional tests the user need to be the Apache user.
    - sudo -E -u ${APACHE_RUN_USER} robo test:suite "${PHPUNIT_TESTS}functional"
  after_script:
    - cp ${WEB_ROOT}/sites/simpletest/browser_output/*.html ${REPORT_DIR}/functional/ || true

Functional Js:
  stage: tests
  extends: .test_template
  script:
    # Ensure selenium is up.
    - /scripts/start-selenium-standalone.sh&
    - sleep 5s && curl -s http://localhost:4444/wd/hub | jq '.'
    - sudo -E -u ${APACHE_RUN_USER} robo test:suite "${PHPUNIT_TESTS}functional-javascript"
  after_script:
    - cp ${WEB_ROOT}/sites/simpletest/browser_output/*.html ${REPORT_DIR}/functional-javascript/ || true

# https://www.drupal.org/docs/8/testing/javascript-testing-using-nightwatch
# Nightwatch Js:
#   stage: tests
#   extends: .test_template
#   script:
#     - cp ${CI_PROJECT_DIR}/.gitlab-ci/.env.nightwatch ${WEB_ROOT}/core/.env || true
#     # [TEMPORARY] Patch for Nightwatch 1.11+ and allow install profile.
#     - cd ${WEB_ROOT}
#     - curl -fsSL https://www.drupal.org/files/issues/2019-07-02/3059356-12-nightwatch-upgrade.patch -o upgrade.patch
#     - patch -p1 < upgrade.patch || true
#     - curl -fsSL https://www.drupal.org/files/issues/2019-02-05/3017176-7.patch -o 3017176-7.patch
#     - patch -p1 < 3017176-7.patch || true
#     # Regular test commands.
#     - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${WEB_ROOT} || true
#     - robo prepare:folders
#     - chown -R ${APACHE_RUN_USER}:${APACHE_RUN_GROUP} ${WEB_ROOT}/sites
#     - cd ${WEB_ROOT}/core
#     - yarn install
#     # Html reporter.
#     - yarn add nightwatch-html-reporter
#     - cp ${CI_PROJECT_DIR}/.gitlab-ci/html-reporter.js ${WEB_ROOT}/core/html-reporter.js || true
#     - mkdir -p ${WEB_ROOT}/core/reports
#     - yarn test:nightwatch ${NIGHTWATCH_TESTS} --reporter ./html-reporter.js
#   after_script:
#     - mkdir -p ${CI_PROJECT_DIR}/${REPORT_DIR}/nightwatch
#     - cp -r ${WEB_ROOT}/core/reports/* ${CI_PROJECT_DIR}/${REPORT_DIR}/nightwatch/
#   artifacts:
#     <<: *default_artifacts
#     paths:
#       - ${REPORT_DIR}

################################################################################
# Third party tools tests.
#
# [TESTING] Next part can be removed for testing only.
################################################################################

# [CI_TYPE] [TESTING] Next part can be removed if no dependencies for a single
# module / theme.
# Security report:
#   stage: tests
#   extends: .test_except_only
#   before_script:
#     - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
#     - robo prepare:folders
#   script:
#     - if [ -f composer.lock ]; then
#         security-checker security:check;
#       else
#         echo "[SKIP] No composer.lock file!";
#       fi
#   dependencies:
#     - Build

# Behat tests from tests/ folder.
# Behat tests:
#   stage: tests
#   extends: .test_template
#   script:
#     - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${WEB_ROOT} || true
#     - robo prepare:folders
#     - robo install:drupal
#     - chown -R ${APACHE_RUN_USER}:${APACHE_RUN_GROUP} ${WEB_ROOT}/sites/
#     # Starting Chrome, we are not using Selenium.
#     - /scripts/start-chrome.sh&
#     - sleep 5s && curl -s http://localhost:9222/json/version | jq '.'
#     - robo test:behat "${CI_PROJECT_DIR}/${REPORT_DIR}"
#   variables:
#     <<: *test_variables
#     DRUPAL_INSTALL_PROFILE: "standard"
#     CHROMIUM_OPTS: "--disable-gpu --headless --no-sandbox --window-size=1920,1080 --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222"
#     BEHAT_PARAMS: >
#       {
#         "extensions" : {
#           "Bex\\Behat\\ScreenshotExtension" : {
#             "image_drivers" : {
#               "local" : { "screenshot_directory" : "${CI_PROJECT_DIR}/${REPORT_DIR}/behat" }
#             }
#           },
#           "Drupal\\DrupalExtension" : {
#             "drupal" : {
#               "drupal_root" : "${WEB_ROOT}"
#             }
#           }
#         }
#       }

################################################################################
# Accessibility jobs for Drupal 8+
#
# [TESTING] Next part can be removed for testing only.
################################################################################

Pa11y:
  stage: tests
  extends: .test_template
  script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${WEB_ROOT} || true
    - robo prepare:folders
    - robo install:drupal
    - cd ${WEB_ROOT}/core
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/pa11y-ci.json ${WEB_ROOT}/core || true
    - yarn add pa11y-ci
    - node_modules/.bin/pa11y-ci --config ./pa11y-ci.json
  after_script:
    - cp -f ${WEB_ROOT}/core/reports/pa11y*.png ${CI_PROJECT_DIR}/${REPORT_DIR}/
  variables:
    <<: *test_variables
    DRUPAL_INSTALL_PROFILE: "standard"
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/*.png

################################################################################
# Code quality jobs for Drupal 8+
#
# [TESTING] Next part can be removed for testing only.
################################################################################

# Automated quality check job when something is pushed/merged on master.
# We have a limit on errors we accept on the tools, if failed we run a
# report and stop.
Code quality:
  stage: code quality
  only:
    - branches
  artifacts:
    <<: *default_artifacts
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpmd.xml ${CI_PROJECT_DIR}/.phpmd.xml || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpqa.yml ${CI_PROJECT_DIR}/.phpqa.yml || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
  script:
    - phpqa ${PHPQA_REPORT} ${TOOLS} ${PHPQA_PHP_CODE}

# Drupal coding standard best practices report.
Best practices:
  stage: code quality
  only:
    - branches
  artifacts:
    <<: *default_artifacts
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpqa.yml ${CI_PROJECT_DIR}/.phpqa.yml || true
    - sed -i 's/Drupal/DrupalPractice/g' ${CI_PROJECT_DIR}/.phpqa.yml
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
  script:
    - phpqa ${PHPQA_REPORT}
      --tools ${BEST_PRACTICES}
      ${PHPQA_PHP_CODE}
  # Allow failure to produce report and warning.
  allow_failure: true

################################################################################
# Code  lint jobs for Drupal 8+
#
# [TESTING] Next part can be removed for testing only.
################################################################################

# Common definition for all lint jobs.
.lint_template:
  only:
    - branches
  # Allow failure to produce report and warning, not a critical job.
  allow_failure: true

# This is a eslint report based on Drupal 8.x standards.
Js lint:
  stage: code lint
  extends: .lint_template
  artifacts:
    <<: *default_artifacts
  artifacts:
    paths:
      - ${REPORT_DIR}/js-lint-report.html
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.eslintignore ${CI_PROJECT_DIR}/.eslintignore || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
    # We grab the latest eslint rules for Drupal 8.
    - mkdir -p ${WEB_ROOT}/core
    - curl -fsSL https://git.drupalcode.org/project/drupal/raw/${DRUPAL_VERSION}.x/core/.eslintrc.json
      -o ${WEB_ROOT}/core/.eslintrc.json
    # Drupal 8.x specific rules override for passing.
    - curl -fsSL https://git.drupalcode.org/project/drupal/raw/${DRUPAL_VERSION}.x/core/.eslintrc.passing.json
      -o ${WEB_ROOT}/core/.eslintrc.passing.json
  script:
    # Run the eslint command to generate a report.
    # Terminal result.
    - eslint
        --config ${WEB_ROOT}/core/.eslintrc.passing.json
        ${JS_CODE}
    # Html report.
    - eslint
        --config ${WEB_ROOT}/core/.eslintrc.passing.json
        --format html
        --output-file ${REPORT_DIR}/js-lint-report.html
        ${JS_CODE}

# Drupal 8.x rules used here for stylelint to check css.
Css lint:
  stage: code lint
  extends: .lint_template
  artifacts:
    <<: *default_artifacts
    # paths:
      # - ${REPORT_DIR}/*.txt
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
    # We grab the latest stylelint rules for Drupal 8.
    - mkdir -p ${WEB_ROOT}/core
    - curl -fsSL https://git.drupalcode.org/project/drupal/raw/${DRUPAL_VERSION}.x/core/.stylelintrc.json
      -o ${WEB_ROOT}/core/.stylelintrc.json
  script:
    # Css report.
    - stylelint --config-basedir /var/www/.node/node_modules/
      --config ${WEB_ROOT}/core/.stylelintrc.json -f verbose "${CSS_FILES}"
    # - stylelint --config-basedir /var/www.node/node_modules/
      # --config ${WEB_ROOT}/core/.stylelintrc.json -f verbose "${CSS_FILES}" > ${REPORT_DIR}/css-lint-report.txt

# This is a sass lint report, default rules used here for Bootstrap based sass.
Sass lint:
  stage: code lint
  extends: .lint_template
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/sass-lint-report.html
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
    - cd /var/www/.node/
    - npm install --no-audit git://github.com/sasstools/sass-lint.git#develop
  script:
    # Terminal result.
    - /var/www/.node/node_modules/.bin/sass-lint --config ${SASS_CONFIG} --verbose --no-exit
    # Html report.
    - /var/www/.node/node_modules/.bin/sass-lint --config ${SASS_CONFIG}
        --verbose
        --no-exit
        --format html
        --output ${REPORT_DIR}/sass-lint-report.html
    - echo "[Note] If sass-lint succeed without errors, no report or message will appear."
  allow_failure: true

################################################################################
# Code metrics, would probably make sense only for a tag release.
#
# [TESTING] Next part can be removed for testing only.
################################################################################

# Common definition for all metrics jobs.
.metrics_template:
  stage: php code metrics
  # Could use only on tag release.
  only:
    - master
    - tags
  artifacts:
    <<: *default_artifacts
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpqa.yml ${CI_PROJECT_DIR}/.phpqa.yml || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders

# Phpmetrics report, no pass or failure as it's just informative.
Php metrics:
  extends: .metrics_template
  artifacts:
    paths:
      - ${REPORT_DIR}/
  script:
    - phpqa ${PHPQA_REPORT} --tools phpmetrics ${PHPQA_PHP_CODE}

# Phploc, Pdepend report, no pass or failure as it's just informative.
Php stats:
  extends: .metrics_template
  script:
    - phpqa ${PHPQA_REPORT} --tools phploc,pdepend ${PHPQA_PHP_CODE}

# [CI_TYPE] Same reports for all Drupal code including our custom.
# Those commands require enough resources from the runner.
Php metrics All:
  stage: php code metrics
  extends: .metrics_template
  # Need same constraint as Build job.
  extends: .test_except_only
  only:
    - tags
  script:
    - phpqa ${PHPQA_REPORT}
        --tools phpmetrics
        ${PHPQA_ALL_CODE}
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/
  dependencies:
    - Build
  when: manual

Php stats All:
  stage: php code metrics
  extends: .metrics_template
  # Need same constraint as Build job.
  extends: .test_except_only
  only:
    - tags
  script:
    - phpqa ${PHPQA_REPORT}
        --tools phploc,pdepend
        ${PHPQA_ALL_CODE}
  dependencies:
    - Build
  when: manual

################################################################################
# [DEPLOY] Deploy jobs definition.
# [CI_TYPE] Next part could be used only for a project with deploy.
# [TESTING] Next part can be removed for testing only.
#
# This is a sample workflow, testing is run on master and testing branches
# pushes or merge, other deploy are manual. Using a basic bash deploy, you must
# adapt if you are using a specific deploy process.
#
# You need to be sure we can ssh to the machine, a deploy key must be manually
# added on the target in  ~/.ssh/authorized_keys
# Private key name and values must be set on Gitlab:
#   Settings > CI / CD > Variables
################################################################################

# Basic docker image with ssh to be able to access a remote.
# Each access must add a ssh key, see samples below.
# .deploy_template:
#   image: alpine:latest
#   only:
#     - master
#     - tags
#   before_script:
#     - apk --no-cache add openssh-client
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     # Avoid warning on connection.
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#     # Add our private key.
#     - echo -e "${PRIVATE_KEY}" > ~/.ssh/id_rsa
#     - chmod 400 ~/.ssh/id_rsa
#   variables:
#     PRIVATE_KEY: ""
#   when: manual

# Deploy to testing:
#   stage: deploy to testing
#   extends: .deploy_template
#   only:
#     - testing
#   environment:
#     name: testing
#     url: http://${TESTING_HOST}
#   script:
#     # We can now ssh and run any deploy script.
#     - ssh -T $USER_NAME@$TESTING_HOST
#         "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"
#   variables:
#     PRIVATE_KEY: "${TESTING_PRIVATE_KEY}"

# Deploy to staging:
#   stage: deploy to staging
#   extends: .deploy_template
#   environment:
#     name: staging
#     url: http://${STAGING_HOST}
#   script:
#     # We can now ssh and run any deploy script.
#     - ssh -T $USER_NAME@$TESTING_HOST
#         "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"
#   variables:
#     PRIVATE_KEY: "${STAGING_PRIVATE_KEY}"

# Deploy to production:
#   stage: deploy to production
#   extends: .deploy_template
#   environment:
#     name: production
#     url: http://${PRODUCTION_HOST}
#   script:
#     # We can now ssh and run any deploy script.
#     - ssh -T $USER_NAME@$TESTING_HOST
#         "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"
#   variables:
#     PRIVATE_KEY: "${PRODUCTION_PRIVATE_KEY}"